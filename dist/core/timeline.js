"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _get = require("babel-runtime/helpers/get")["default"];

var _createComputedClass = require("babel-runtime/helpers/create-computed-class")["default"];

var _core = require("babel-runtime/core-js")["default"];

var _regeneratorRuntime = require("babel-runtime/regenerator")["default"];

var _interopRequire = require("babel-runtime/helpers/interop-require")["default"];

var d3Scale = _interopRequire(require("d3-scale"));

var events = _interopRequire(require("events"));

var Keyboard = _interopRequire(require("../interactions/keyboard"));

var Surface = _interopRequire(require("../interactions/surface"));

var View = _interopRequire(require("./view"));

var ViewCollection = _interopRequire(require("./view-collection"));

/**
 * The `Timeline` class is the main entry point to create a representation of temporal data.
 * A `Timeline` instance can have multiples `View` instances, which are basically a view window on the overall timeline.
 *
 * The timeline hold the current interaction state and is the central hub for keyboard as well as mouse events.
 * States are there to facilitating interactions with the timeline for:
 * - zooming
 * - moving
 * - editing
 *
 * Methods `register`, `render` and `update` call the same methods on all the `View` instances, which call the same methods one on all its `Layer` instances.
 * - `register`: registers a `View` instance onto the timeline (ie. the timeline can `render` and `update` its different views)
 * - `render`: renders the DOM for the element (if has one) and its descendant (here renders the views, ie. render the DOM tree for a view and attach it in the DOM at the right place)
 * - `update`: update the display according to data changes (ie. update the DOM element attached to the DOM tree with render method, based on new data).
 */

var Timeline = (function (_events$EventEmitter) {
  /**
   * Creates a new `Timeline` instance
   */

  function Timeline() {
    _classCallCheck(this, Timeline);

    _get(_core.Object.getPrototypeOf(Timeline.prototype), "constructor", this).call(this);

    this._views = new ViewCollection(this);

    this._state = null;
    this._handleEvent = this._handleEvent.bind(this);
    this._createInteraction(Keyboard, "body");

    // init default configuration for views factory
    this._viewsConfiguration = {};
    this.configureViews();
    // stores
    this._viewsById = {};
    this._groupedLayers = {};
  }

  _inherits(Timeline, _events$EventEmitter);

  _createComputedClass(Timeline, [{
    key: "_createInteraction",

    /**
     * Factory method to add interaction modules the timeline should listen to.
     * By default, the timeline listen to Keyboard, and instance a Surface on each container
     * @param {EventSource} ctor - the contructor of the interaction module to instanciate
     * @param el {DOMElement} the DOM element to bind to the EventSource module
     * @param options {Object} options to be applied to the ctor (defaults to `{}`)
     */
    value: function _createInteraction(ctor, el) {
      var options = arguments[2] === undefined ? {} : arguments[2];

      var interaction = new ctor(el, options);
      interaction.on("event", this._handleEvent);
    }
  }, {
    key: "_handleEvent",

    /**
     * The callback that is used to listen to interactions modules
     * @params {Event} e - a custom event generated by interaction modules
     */
    value: function _handleEvent(e) {
      // emit event as a middleware
      this.emit("event", e);
      // propagate to the state
      if (!this._state) {
        return;
      }
      this._state.handleEvent(e);
    }
  }, {
    key: "state",

    /**
     * Changes the state of the timeline.
     * `State` instances are used to define the application logic by precising specific user interaction cases, and how they impact the overal temporal data representation.
     *
     * @param {BaseState} state - the state in which the timeline must be setted
     */
    set: function (state) {
      if (this._state) {
        this._state.exit();
      }
      this._state = state;
      this._state.enter();
    },
    get: function () {
      return this._state;
    }
  }, {
    key: "views",

    /**
     *  Shortcut to access the View collection
     *  @return {ViewCollection}
     */
    get: function () {
      return this._views;
    }
  }, {
    key: "layers",

    /**
     *  Shortcut to access the Layer list
     *  @return {Array}
     */
    get: function () {
      return this._views.layers;
    }
  }, {
    key: "add",

    /**
     * Adds a view to the timeline
     * Views display this window on the timeline in theirs own SVG element.
     * @param {View} view
     */
    value: function add(view) {
      if (this.views.indexOf(view) !== -1) {
        throw new Error("view already added to the timeline");
      }

      this.views.push(view);
      this._createInteraction(Surface, view.$el);
    }
  }, {
    key: "remove",
    value: function remove(view) {}
  }, {
    key: "configureViews",

    /**
     *  Defines a default for each view to be created
     *  @param {Number} pixelsPerSeconds
     *  @param {Number} width
     *  @param {Number} height
     */
    value: function configureViews() {
      var pixelsPerSecond = arguments[0] === undefined ? 100 : arguments[0];
      var width = arguments[1] === undefined ? 1000 : arguments[1];
      var height = arguments[2] === undefined ? 120 : arguments[2];

      this._viewsConfiguration = { pixelsPerSecond: pixelsPerSecond, width: width, height: height };
    }
  }, {
    key: "createView",

    /**
     *  Creates a new view from the configuration define in `configureViews`
     *  @param {DOMElement} $el - the element to insert the view inside
     *  @param {Object} options - override the defaults options if necessary
     *  @param {String} [viewId=null] - optionnal id to give to the view, only exists in timeline's context
     *  @return {View}
     */
    value: function createView($el) {
      var options = arguments[1] === undefined ? {} : arguments[1];
      var viewId = arguments[2] === undefined ? null : arguments[2];

      var config = _core.Object.assign({}, this._viewsConfiguration, options);
      var pixelsPerSecond = config.pixelsPerSecond;
      var width = config.width;
      var height = config.height;

      var view = new View($el, pixelsPerSecond, width, height);

      if (viewId !== null) {
        if (this._viewsById[viewId] !== undefined) {
          throw new Error("viewId: \"" + viewId + "\" is already used");
        }

        this._viewsById[viewId] = view;
      }
      // add view to the timeline
      this.add(view);
      return view;
    }
  }, {
    key: "addLayer",

    /**
     *  Adds a layer to a view, allow to group view arbitrarily inside groups. Basically a wrapper for `view.add(layer)`
     *  @param {Layer} layer - the layer to add
     *  @param {View} view - the view to the insert the layer in
     *  @param {String} [groupId='default'] - the group in which associate the layer
     */
    value: function addLayer(layer, viewOrViewId) {
      var groupId = arguments[2] === undefined ? "default" : arguments[2];

      var view = viewOrViewId;

      if (typeof viewOrViewId === "string") {
        view = this.getViewById(viewOrViewId);
      }
      // we should have a View instance at this point
      view.add(layer);

      if (!this._groupedLayers[groupId]) {
        this._groupedLayers[groupId] = [];
      }

      this._groupedLayers[groupId].push(layer);
    }
  }, {
    key: "removeLayer",

    /**
     *  Removes a layer from its view (the layer is detatched from the DOM but can still be reused)
     *  @param {Layer} layer - the layer to remove
     */
    value: function removeLayer(layer) {
      this.views.forEach(function (view) {
        var index = view.layers.indexOf(layer);
        if (index !== -1) {
          view.remove(layer);
        }
      });

      for (var groupId in this._groupedLayers) {
        var group = this._groupedLayers[groupId];
        var index = group.indexOf(layer);

        if (index !== -1) {
          group.splice(layer, 1);
        }

        if (!group.length) {
          delete this._groupedLayers[groupId];
        }
      }
    }
  }, {
    key: "getViewById",

    /**
     *  Returns a view from it's id
     *  @param {String} viewId
     *  @return {View}
     */
    value: function getViewById(viewId) {
      return this._viewsById[viewId];
    }
  }, {
    key: "getLayersByGroup",

    /**
     *  Returns an array of layers from their group Id
     *  @param {String} groupId
     *  @return {Array}
     */
    value: function getLayersByGroup(groupId) {
      return this._groupedLayers[groupId];
    }
  }, {
    key: _core.Symbol.iterator,
    value: _regeneratorRuntime.mark(function callee$1$0() {
      var _this = this;

      return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.delegateYield(_core.$for.getIterator(_this.views), "t227", 1);

          case 1:
          case "end":
            return context$2$0.stop();
        }
      }, callee$1$0, this);
    })
  }]);

  return Timeline;
})(events.EventEmitter);

module.exports = Timeline;

// @TODO
//# sourceMappingURL=data:application/json;base64,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QU0sQ0FBQyxDQUFDO0tBQ2hDOzs7Ozs7Ozs7V0FPZSwwQkFBQyxPQUFPLEVBQUU7QUFDeEIsYUFBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3JDOztTQUVDLE1BQUEsTUFBTSxDQUFDLFFBQVE7b0NBQUM7Ozs7OztvRUFDVCxNQUFLLEtBQUs7Ozs7Ozs7S0FDbEI7OztTQWxNa0IsUUFBUTtHQUFTLE1BQU0sQ0FBQyxZQUFZOztpQkFBcEMsUUFBUSIsImZpbGUiOiJlczYvY29yZS90aW1lbGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkM1NjYWxlIGZyb20gJ2QzLXNjYWxlJztcbmltcG9ydCBldmVudHMgZnJvbSAnZXZlbnRzJztcblxuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4uL2ludGVyYWN0aW9ucy9rZXlib2FyZCc7XG5pbXBvcnQgU3VyZmFjZSBmcm9tICcuLi9pbnRlcmFjdGlvbnMvc3VyZmFjZSc7XG5pbXBvcnQgVmlldyBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IFZpZXdDb2xsZWN0aW9uIGZyb20gJy4vdmlldy1jb2xsZWN0aW9uJztcblxuXG4vKipcbiAqIFRoZSBgVGltZWxpbmVgIGNsYXNzIGlzIHRoZSBtYWluIGVudHJ5IHBvaW50IHRvIGNyZWF0ZSBhIHJlcHJlc2VudGF0aW9uIG9mIHRlbXBvcmFsIGRhdGEuXG4gKiBBIGBUaW1lbGluZWAgaW5zdGFuY2UgY2FuIGhhdmUgbXVsdGlwbGVzIGBWaWV3YCBpbnN0YW5jZXMsIHdoaWNoIGFyZSBiYXNpY2FsbHkgYSB2aWV3IHdpbmRvdyBvbiB0aGUgb3ZlcmFsbCB0aW1lbGluZS5cbiAqXG4gKiBUaGUgdGltZWxpbmUgaG9sZCB0aGUgY3VycmVudCBpbnRlcmFjdGlvbiBzdGF0ZSBhbmQgaXMgdGhlIGNlbnRyYWwgaHViIGZvciBrZXlib2FyZCBhcyB3ZWxsIGFzIG1vdXNlIGV2ZW50cy5cbiAqIFN0YXRlcyBhcmUgdGhlcmUgdG8gZmFjaWxpdGF0aW5nIGludGVyYWN0aW9ucyB3aXRoIHRoZSB0aW1lbGluZSBmb3I6XG4gKiAtIHpvb21pbmdcbiAqIC0gbW92aW5nXG4gKiAtIGVkaXRpbmdcbiAqXG4gKiBNZXRob2RzIGByZWdpc3RlcmAsIGByZW5kZXJgIGFuZCBgdXBkYXRlYCBjYWxsIHRoZSBzYW1lIG1ldGhvZHMgb24gYWxsIHRoZSBgVmlld2AgaW5zdGFuY2VzLCB3aGljaCBjYWxsIHRoZSBzYW1lIG1ldGhvZHMgb25lIG9uIGFsbCBpdHMgYExheWVyYCBpbnN0YW5jZXMuXG4gKiAtIGByZWdpc3RlcmA6IHJlZ2lzdGVycyBhIGBWaWV3YCBpbnN0YW5jZSBvbnRvIHRoZSB0aW1lbGluZSAoaWUuIHRoZSB0aW1lbGluZSBjYW4gYHJlbmRlcmAgYW5kIGB1cGRhdGVgIGl0cyBkaWZmZXJlbnQgdmlld3MpXG4gKiAtIGByZW5kZXJgOiByZW5kZXJzIHRoZSBET00gZm9yIHRoZSBlbGVtZW50IChpZiBoYXMgb25lKSBhbmQgaXRzIGRlc2NlbmRhbnQgKGhlcmUgcmVuZGVycyB0aGUgdmlld3MsIGllLiByZW5kZXIgdGhlIERPTSB0cmVlIGZvciBhIHZpZXcgYW5kIGF0dGFjaCBpdCBpbiB0aGUgRE9NIGF0IHRoZSByaWdodCBwbGFjZSlcbiAqIC0gYHVwZGF0ZWA6IHVwZGF0ZSB0aGUgZGlzcGxheSBhY2NvcmRpbmcgdG8gZGF0YSBjaGFuZ2VzIChpZS4gdXBkYXRlIHRoZSBET00gZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgRE9NIHRyZWUgd2l0aCByZW5kZXIgbWV0aG9kLCBiYXNlZCBvbiBuZXcgZGF0YSkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVsaW5lIGV4dGVuZHMgZXZlbnRzLkV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGBUaW1lbGluZWAgaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl92aWV3cyA9IG5ldyBWaWV3Q29sbGVjdGlvbih0aGlzKTtcblxuICAgIHRoaXMuX3N0YXRlID0gbnVsbDtcbiAgICB0aGlzLl9oYW5kbGVFdmVudCA9IHRoaXMuX2hhbmRsZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5fY3JlYXRlSW50ZXJhY3Rpb24oS2V5Ym9hcmQsICdib2R5Jyk7XG5cbiAgICAvLyBpbml0IGRlZmF1bHQgY29uZmlndXJhdGlvbiBmb3Igdmlld3MgZmFjdG9yeVxuICAgIHRoaXMuX3ZpZXdzQ29uZmlndXJhdGlvbiA9IHt9O1xuICAgIHRoaXMuY29uZmlndXJlVmlld3MoKTtcbiAgICAvLyBzdG9yZXNcbiAgICB0aGlzLl92aWV3c0J5SWQgPSB7fTtcbiAgICB0aGlzLl9ncm91cGVkTGF5ZXJzID0ge307XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgdG8gYWRkIGludGVyYWN0aW9uIG1vZHVsZXMgdGhlIHRpbWVsaW5lIHNob3VsZCBsaXN0ZW4gdG8uXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSB0aW1lbGluZSBsaXN0ZW4gdG8gS2V5Ym9hcmQsIGFuZCBpbnN0YW5jZSBhIFN1cmZhY2Ugb24gZWFjaCBjb250YWluZXJcbiAgICogQHBhcmFtIHtFdmVudFNvdXJjZX0gY3RvciAtIHRoZSBjb250cnVjdG9yIG9mIHRoZSBpbnRlcmFjdGlvbiBtb2R1bGUgdG8gaW5zdGFuY2lhdGVcbiAgICogQHBhcmFtIGVsIHtET01FbGVtZW50fSB0aGUgRE9NIGVsZW1lbnQgdG8gYmluZCB0byB0aGUgRXZlbnRTb3VyY2UgbW9kdWxlXG4gICAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9IG9wdGlvbnMgdG8gYmUgYXBwbGllZCB0byB0aGUgY3RvciAoZGVmYXVsdHMgdG8gYHt9YClcbiAgICovXG4gIF9jcmVhdGVJbnRlcmFjdGlvbihjdG9yLCBlbCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgaW50ZXJhY3Rpb24gPSBuZXcgY3RvcihlbCwgb3B0aW9ucyk7XG4gICAgaW50ZXJhY3Rpb24ub24oJ2V2ZW50JywgdGhpcy5faGFuZGxlRXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjYWxsYmFjayB0aGF0IGlzIHVzZWQgdG8gbGlzdGVuIHRvIGludGVyYWN0aW9ucyBtb2R1bGVzXG4gICAqIEBwYXJhbXMge0V2ZW50fSBlIC0gYSBjdXN0b20gZXZlbnQgZ2VuZXJhdGVkIGJ5IGludGVyYWN0aW9uIG1vZHVsZXNcbiAgICovXG4gIF9oYW5kbGVFdmVudChlKSB7XG4gICAgLy8gZW1pdCBldmVudCBhcyBhIG1pZGRsZXdhcmVcbiAgICB0aGlzLmVtaXQoJ2V2ZW50JywgZSk7XG4gICAgLy8gcHJvcGFnYXRlIHRvIHRoZSBzdGF0ZVxuICAgIGlmICghdGhpcy5fc3RhdGUpIHsgcmV0dXJuOyB9XG4gICAgdGhpcy5fc3RhdGUuaGFuZGxlRXZlbnQoZSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBzdGF0ZSBvZiB0aGUgdGltZWxpbmUuXG4gICAqIGBTdGF0ZWAgaW5zdGFuY2VzIGFyZSB1c2VkIHRvIGRlZmluZSB0aGUgYXBwbGljYXRpb24gbG9naWMgYnkgcHJlY2lzaW5nIHNwZWNpZmljIHVzZXIgaW50ZXJhY3Rpb24gY2FzZXMsIGFuZCBob3cgdGhleSBpbXBhY3QgdGhlIG92ZXJhbCB0ZW1wb3JhbCBkYXRhIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jhc2VTdGF0ZX0gc3RhdGUgLSB0aGUgc3RhdGUgaW4gd2hpY2ggdGhlIHRpbWVsaW5lIG11c3QgYmUgc2V0dGVkXG4gICAqL1xuICBzZXQgc3RhdGUoc3RhdGUpIHtcbiAgICBpZiAodGhpcy5fc3RhdGUpIHsgdGhpcy5fc3RhdGUuZXhpdCgpOyB9XG4gICAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLl9zdGF0ZS5lbnRlcigpO1xuICB9XG5cbiAgZ2V0IHN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiAgU2hvcnRjdXQgdG8gYWNjZXNzIHRoZSBWaWV3IGNvbGxlY3Rpb25cbiAgICogIEByZXR1cm4ge1ZpZXdDb2xsZWN0aW9ufVxuICAgKi9cbiAgZ2V0IHZpZXdzKCkge1xuICAgIHJldHVybiB0aGlzLl92aWV3cztcbiAgfVxuXG4gIC8qKlxuICAgKiAgU2hvcnRjdXQgdG8gYWNjZXNzIHRoZSBMYXllciBsaXN0XG4gICAqICBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIGdldCBsYXllcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdzLmxheWVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgdmlldyB0byB0aGUgdGltZWxpbmVcbiAgICogVmlld3MgZGlzcGxheSB0aGlzIHdpbmRvdyBvbiB0aGUgdGltZWxpbmUgaW4gdGhlaXJzIG93biBTVkcgZWxlbWVudC5cbiAgICogQHBhcmFtIHtWaWV3fSB2aWV3XG4gICAqL1xuICBhZGQodmlldykge1xuICAgIGlmICh0aGlzLnZpZXdzLmluZGV4T2YodmlldykgIT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZpZXcgYWxyZWFkeSBhZGRlZCB0byB0aGUgdGltZWxpbmUnKTtcbiAgICB9XG5cbiAgICB0aGlzLnZpZXdzLnB1c2godmlldyk7XG4gICAgdGhpcy5fY3JlYXRlSW50ZXJhY3Rpb24oU3VyZmFjZSwgdmlldy4kZWwpO1xuICB9XG5cbiAgcmVtb3ZlKHZpZXcpIHtcbiAgICAvLyBAVE9ET1xuICB9XG5cbiAgLyoqXG4gICAqICBEZWZpbmVzIGEgZGVmYXVsdCBmb3IgZWFjaCB2aWV3IHRvIGJlIGNyZWF0ZWRcbiAgICogIEBwYXJhbSB7TnVtYmVyfSBwaXhlbHNQZXJTZWNvbmRzXG4gICAqICBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAgICogIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICovXG4gIGNvbmZpZ3VyZVZpZXdzKHBpeGVsc1BlclNlY29uZCA9IDEwMCwgd2lkdGggPSAxMDAwLCBoZWlnaHQgPSAxMjApIHtcbiAgICB0aGlzLl92aWV3c0NvbmZpZ3VyYXRpb24gPSB7IHBpeGVsc1BlclNlY29uZCwgd2lkdGgsIGhlaWdodCB9O1xuICB9XG5cbiAgLyoqXG4gICAqICBDcmVhdGVzIGEgbmV3IHZpZXcgZnJvbSB0aGUgY29uZmlndXJhdGlvbiBkZWZpbmUgaW4gYGNvbmZpZ3VyZVZpZXdzYFxuICAgKiAgQHBhcmFtIHtET01FbGVtZW50fSAkZWwgLSB0aGUgZWxlbWVudCB0byBpbnNlcnQgdGhlIHZpZXcgaW5zaWRlXG4gICAqICBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG92ZXJyaWRlIHRoZSBkZWZhdWx0cyBvcHRpb25zIGlmIG5lY2Vzc2FyeVxuICAgKiAgQHBhcmFtIHtTdHJpbmd9IFt2aWV3SWQ9bnVsbF0gLSBvcHRpb25uYWwgaWQgdG8gZ2l2ZSB0byB0aGUgdmlldywgb25seSBleGlzdHMgaW4gdGltZWxpbmUncyBjb250ZXh0XG4gICAqICBAcmV0dXJuIHtWaWV3fVxuICAgKi9cbiAgY3JlYXRlVmlldygkZWwsIG9wdGlvbnMgPSB7fSwgdmlld0lkID0gbnVsbCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3ZpZXdzQ29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgY29uc3QgeyBwaXhlbHNQZXJTZWNvbmQsIHdpZHRoLCBoZWlnaHQgfSA9IGNvbmZpZztcbiAgICBjb25zdCB2aWV3ID0gbmV3IFZpZXcoJGVsLCBwaXhlbHNQZXJTZWNvbmQsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgaWYgKHZpZXdJZCAhPT0gbnVsbCkge1xuICAgICAgaWYgKHRoaXMuX3ZpZXdzQnlJZFt2aWV3SWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB2aWV3SWQ6IFwiJHt2aWV3SWR9XCIgaXMgYWxyZWFkeSB1c2VkYCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3ZpZXdzQnlJZFt2aWV3SWRdID0gdmlldztcbiAgICB9XG4gICAgLy8gYWRkIHZpZXcgdG8gdGhlIHRpbWVsaW5lXG4gICAgdGhpcy5hZGQodmlldyk7XG4gICAgcmV0dXJuIHZpZXc7XG4gIH1cblxuICAvKipcbiAgICogIEFkZHMgYSBsYXllciB0byBhIHZpZXcsIGFsbG93IHRvIGdyb3VwIHZpZXcgYXJiaXRyYXJpbHkgaW5zaWRlIGdyb3Vwcy4gQmFzaWNhbGx5IGEgd3JhcHBlciBmb3IgYHZpZXcuYWRkKGxheWVyKWBcbiAgICogIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gdGhlIGxheWVyIHRvIGFkZFxuICAgKiAgQHBhcmFtIHtWaWV3fSB2aWV3IC0gdGhlIHZpZXcgdG8gdGhlIGluc2VydCB0aGUgbGF5ZXIgaW5cbiAgICogIEBwYXJhbSB7U3RyaW5nfSBbZ3JvdXBJZD0nZGVmYXVsdCddIC0gdGhlIGdyb3VwIGluIHdoaWNoIGFzc29jaWF0ZSB0aGUgbGF5ZXJcbiAgICovXG4gIGFkZExheWVyKGxheWVyLCB2aWV3T3JWaWV3SWQsIGdyb3VwSWQgPSAnZGVmYXVsdCcpIHtcbiAgICBsZXQgdmlldyA9IHZpZXdPclZpZXdJZDtcblxuICAgIGlmICh0eXBlb2Ygdmlld09yVmlld0lkID09PSAnc3RyaW5nJykge1xuICAgICAgdmlldyA9IHRoaXMuZ2V0Vmlld0J5SWQodmlld09yVmlld0lkKTtcbiAgICB9XG4gICAgLy8gd2Ugc2hvdWxkIGhhdmUgYSBWaWV3IGluc3RhbmNlIGF0IHRoaXMgcG9pbnRcbiAgICB2aWV3LmFkZChsYXllcik7XG5cbiAgICBpZiAoIXRoaXMuX2dyb3VwZWRMYXllcnNbZ3JvdXBJZF0pIHtcbiAgICAgIHRoaXMuX2dyb3VwZWRMYXllcnNbZ3JvdXBJZF0gPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLl9ncm91cGVkTGF5ZXJzW2dyb3VwSWRdLnB1c2gobGF5ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqICBSZW1vdmVzIGEgbGF5ZXIgZnJvbSBpdHMgdmlldyAodGhlIGxheWVyIGlzIGRldGF0Y2hlZCBmcm9tIHRoZSBET00gYnV0IGNhbiBzdGlsbCBiZSByZXVzZWQpXG4gICAqICBAcGFyYW0ge0xheWVyfSBsYXllciAtIHRoZSBsYXllciB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZUxheWVyKGxheWVyKSB7XG4gICAgdGhpcy52aWV3cy5mb3JFYWNoKGZ1bmN0aW9uKHZpZXcpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdmlldy5sYXllcnMuaW5kZXhPZihsYXllcik7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7IHZpZXcucmVtb3ZlKGxheWVyKTsgfVxuICAgIH0pO1xuXG4gICAgZm9yIChsZXQgZ3JvdXBJZCBpbiB0aGlzLl9ncm91cGVkTGF5ZXJzKSB7XG4gICAgICBjb25zdCBncm91cCA9IHRoaXMuX2dyb3VwZWRMYXllcnNbZ3JvdXBJZF07XG4gICAgICBjb25zdCBpbmRleCA9IGdyb3VwLmluZGV4T2YobGF5ZXIpO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7IGdyb3VwLnNwbGljZShsYXllciwgMSk7IH1cblxuICAgICAgaWYgKCFncm91cC5sZW5ndGgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2dyb3VwZWRMYXllcnNbZ3JvdXBJZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqICBSZXR1cm5zIGEgdmlldyBmcm9tIGl0J3MgaWRcbiAgICogIEBwYXJhbSB7U3RyaW5nfSB2aWV3SWRcbiAgICogIEByZXR1cm4ge1ZpZXd9XG4gICAqL1xuICBnZXRWaWV3QnlJZCh2aWV3SWQpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlld3NCeUlkW3ZpZXdJZF07XG4gIH1cblxuICAvKipcbiAgICogIFJldHVybnMgYW4gYXJyYXkgb2YgbGF5ZXJzIGZyb20gdGhlaXIgZ3JvdXAgSWRcbiAgICogIEBwYXJhbSB7U3RyaW5nfSBncm91cElkXG4gICAqICBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIGdldExheWVyc0J5R3JvdXAoZ3JvdXBJZCkge1xuICAgIHJldHVybiB0aGlzLl9ncm91cGVkTGF5ZXJzW2dyb3VwSWRdO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHlpZWxkKiB0aGlzLnZpZXdzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuIl19