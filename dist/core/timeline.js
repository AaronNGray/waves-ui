"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _get = require("babel-runtime/helpers/get")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _core = require("babel-runtime/core-js")["default"];

var events = require("events");
var ns = require("./namespace");
var TimeContext = require("./time-context");
var Surface = require("../interactions/surface");
var Keyboard = require("../interactions/keyboard");
var Layer = require("./layer");

/**
 *  @class Timeline
 */

var Timeline = (function (_events$EventEmitter) {
  /**
   *  Creates a new Timeline
   *  @param params {Object} an object to override defaults parameters
   */

  function Timeline() {
    var params = arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Timeline);

    _get(_core.Object.getPrototypeOf(Timeline.prototype), "constructor", this).call(this);

    this._defaults = {
      width: 1000,
      duration: 60
    };

    // public attributes
    this.params = _core.Object.assign({}, this._defaults, params);
    this.layers = [];
    this.categorizedLayers = {}; // group layer by categories
    this.context = null;
    // private attributes
    this._state = null;
    this.containers = {};
    this._layerContainerMap = new _core.Map();
    this._handleEvent = this._handleEvent.bind(this);

    this._createTimeContext();
    this._createInteraction(Keyboard, "body");
  }

  _inherits(Timeline, _events$EventEmitter);

  _createClass(Timeline, {
    setState: {

      /**
       *  Change the state of the timeline, `States` are the main entry point between
       *  application logic, interactions, ..., and the library
       *  @param state {BaseState} the state in which the timeline must be setted
       */

      value: function setState(state) {
        if (this._state) {
          this._state.exit();
        }
        this._state = state;
        this._state.enter();
      }
    },
    _handleEvent: {

      /**
       *  @private
       *  The callback that is used to listen to interactions modules
       *  @params e {Event} a custom event generated by interaction modules
       */

      value: function _handleEvent(e) {
        if (!this._state) {
          return;
        }
        this._state.handleEvent(e);
      }
    },
    _createInteraction: {

      /**
       *  Factory method to add interaction modules the timeline should listen to
       *  by default, the timeline listen to Keyboard, and instance a Surface on each
       *  container
       *  @param ctor {EventSource} the contructor of the interaction module to instanciate
       *  @param el {DOMElement} the DOM element to bind to the EventSource module
       */

      value: function _createInteraction(ctor, el) {
        var options = arguments[2] === undefined ? {} : arguments[2];

        var interaction = new ctor(el, options);
        interaction.on("event", this._handleEvent);
      }
    },
    _createTimeContext: {

      /**
       *  Creates a new TimeContext for the visualisation, this `TimeContext`
       *  will be at the top of the `TimeContext` tree
       */

      value: function _createTimeContext() {
        var duration = this.params.duration;
        var width = this.params.width;

        var xScale = d3.scale.linear().domain([0, duration]).range([0, width]);

        this.context = new TimeContext();
        this.context.duration = duration;
        this.context.xScale = xScale;
      }
    },
    xScale: {
      get: function () {
        return this.context.xScale;
      }
    },
    add: {

      /**
       *  Adds a `Layer` to the Timeline
       *  @param layer {Layer} the layer to register
       *  @param containerId {String} a valid id of a previsouly registered container
       *  @param category {String} insert the layer into some user defined category
       *  @param context {TimeContext} a `TimeContext` the layer is associated with
       *      if null given, a new `TimeContext` will be created for the layer
       */

      value: function add(layer, containerId) {
        var category = arguments[2] === undefined ? "default" : arguments[2];
        var context = arguments[3] === undefined ? null : arguments[3];

        var layerContext = context || new TimeContext(this.context);
        layer.setContext(layerContext);

        this._layerContainerMap.set(layer, this.containers[containerId]);
        this.layers.push(layer);

        if (!this.categorizedLayers[category]) {
          this.categorizedLayers[category] = [];
        }

        this.categorizedLayers[category].push(layer);
      }
    },
    remove: {

      /**
       *  Remove a layer from the timeline
       *  @param layer {Layer} the layer to remove
       */

      value: function remove(layer) {}
    },
    getLayers: {

      /**
       *  Returns an array of layers given some category
       *  @param category {String} name of the category
       *  @return {Array} an array of layers which belongs to the category
       */

      value: function getLayers() {
        var category = arguments[0] === undefined ? "default" : arguments[0];

        return this.categorizedLayers[category] || [];
      }
    },
    registerContainer: {

      /**
       *  Register a container and prepare the DOM svg element for the timeline's layers
       *  @param id {String} a user defined id for the container
       *  @param el {DOMElement} the DOMElement to use as a container
       *  @param options {Object} the options to apply to the container
       */

      value: function registerContainer(id, el) {
        var options = arguments[2] === undefined ? {} : arguments[2];

        var width = this.params.width;
        var height = options.height || 120;

        var svg = document.createElementNS(ns, "svg");
        svg.setAttributeNS(null, "width", width);
        svg.setAttributeNS(null, "height", height);
        svg.setAttributeNS(null, "viewbox", "0 0 " + width + " " + height);

        var defs = document.createElementNS(ns, "defs");

        var offsetGroup = document.createElementNS(ns, "g");
        offsetGroup.classList.add("offset");

        var layoutGroup = document.createElementNS(ns, "g");
        layoutGroup.classList.add("layout");

        var interactionsGroup = document.createElementNS(ns, "g");
        interactionsGroup.classList.add("interactions");

        svg.appendChild(defs);
        offsetGroup.appendChild(layoutGroup);
        svg.appendChild(offsetGroup);
        svg.appendChild(interactionsGroup);

        el.appendChild(svg);

        // create a container object
        var container = {
          id: id,
          layoutElement: layoutGroup,
          offsetElement: offsetGroup,
          interactionsElement: interactionsGroup,
          svgElement: svg,
          DOMElement: el,
          brushElement: null
        };

        this.containers[id] = container;
        this._createInteraction(Surface, el);
      }
    },
    getContainerPerElement: {

      // container helpers
      // @NOTE change to `getContainer(el || id || layer)` ?

      value: function getContainerPerElement(el) {
        for (var id in this.containers) {
          var container = this.containers[id];
          if (container.DOMElement === el) {
            return container;
          }
        }

        return null;
      }
    },
    getLayerContainer: {
      value: function getLayerContainer(layer) {
        return this._layerContainerMap.get(layer);
      }
    },
    render: {

      // getContainerPerId(id) {
      //   return this.containers[id];
      // }

      /**
       *  Render all the layers in the timeline
       */

      value: function render() {
        var _this = this;

        this.layers.forEach(function (layer) {
          var container = _this._layerContainerMap.get(layer);
          var layout = container.layoutElement;
          layout.appendChild(layer.render());
        });
      }
    },
    draw: {

      /**
       *  Draw all the layers in the timeline
       */

      value: function draw() {
        var layerOrCategory = arguments[0] === undefined ? null : arguments[0];

        var layers = null;

        if (typeof layerOrCategory === "string") {
          layers = this.getLayers(layerOrCategory);
        } else if (layerOrCategory instanceof Layer) {
          layers = [layerOrCategory];
        } else {
          layers = this.layers;
        }

        this.layers.forEach(function (layer) {
          return layer.draw();
        });
      }
    },
    updateContainers: {
      value: function updateContainers() {
        for (var id in this.containers) {
          var container = this.containers[id];
          var offset = container.offsetElement;
          var context = this.context;
          var translate = "translate(" + context.offset * context.stretchRatio + ", 0)";
          offset.setAttributeNS(null, "transform", translate);
        }
      }
    },
    update: {
      /**
       *  Update all the layers in the timeline
       *  @TODO accept several `layers` or `categories` as arguments ?
       */

      value: function update() {
        var layerOrCategory = arguments[0] === undefined ? null : arguments[0];

        this.updateContainers();
        var layers = null;

        if (typeof layerOrCategory === "string") {
          layers = this.getLayers(layerOrCategory);
        } else if (layerOrCategory instanceof Layer) {
          layers = [layerOrCategory];
        } else {
          layers = this.layers;
        }

        this.emit("update", layers);
        layers.forEach(function (layer) {
          return layer.update();
        });
      }
    }
  });

  return Timeline;
})(events.EventEmitter);

module.exports = Timeline;
//# sourceMappingURL=data:application/json;base64,