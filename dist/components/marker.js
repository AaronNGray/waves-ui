"use strict";

var _babelHelpers = require("babel-runtime/helpers")["default"];

var _core = require("babel-runtime/core-js")["default"];

var _require = require("../helpers/utils");

var uniqueId = _require.uniqueId;
var accessors = _require.accessors;

var _require2 = require("../core/layer");

var Layer = _require2.Layer;

var Marker = (function (Layer) {
  function Marker() {
    _babelHelpers.classCallCheck(this, Marker);

    _babelHelpers.get(_core.Object.getPrototypeOf(Marker.prototype), "constructor", this).call(this);

    var defaults = {
      type: "marker",
      id: uniqueId(name),
      displayHandle: true
    };

    this.params(defaults);
    this.width(1);
    this.color("#000000");
    this.opacity("0.7");
    this.data([{ x: 0 }]);

    this.x(function (d) {
      var v = arguments[1] === undefined ? null : arguments[1];

      if (v === null) {
        return d.x;
      }
      d.x = parseFloat(v, 10);
    });
  }

  _babelHelpers.inherits(Marker, Layer);

  _babelHelpers.prototypeProperties(Marker, null, {
    xZoom: {
      value: function xZoom() {
        this.update();
      },
      writable: true,
      configurable: true
    },
    setCurrentTime: {
      value: function setCurrentTime(currentTime) {
        var x = this.x();

        if (!Array.isArray(currentTime)) {
          x(this.data()[0], currentTime);
        } else {
          this.data(currentTime);
        }

        return this;
      },
      writable: true,
      configurable: true
    },
    handleDrag: {
      value: function handleDrag(el, e) {
        this.move(el, e.originalEvent.dx, e.originalEvent.dy);
      },
      writable: true,
      configurable: true
    },
    move: {
      value: function move(item, dx, dy) {
        item = this.d3.select(item);
        var datum = item.datum();

        var xScale = this.base.xScale;
        var xRange = xScale.range();
        var xAccessor = this.x();
        var x = xScale(xAccessor(datum));
        var targetX = x + dx;

        if (targetX >= xRange[0] && targetX <= xRange[1]) {
          x = targetX;
        }

        xAccessor(datum, xScale.invert(x));
        // redraw element
        this.draw(item);
      },
      writable: true,
      configurable: true
    },
    update: {
      value: function update() {
        var data = arguments[0] === undefined ? null : arguments[0];

        if (data !== null && !Array.isArray(data)) {
          data = [data];
        }
        _babelHelpers.get(_core.Object.getPrototypeOf(Marker.prototype), "update", this).call(this, data);

        this.items = this.g.selectAll("." + this.param("unitClass")).data(this.data());

        var sel = this.items.enter().append("g").classed("item", true).classed(this.param("unitClass"), true);

        var handleHeight = 8;
        var y = this.param("displayHandle") ? handleHeight : 0;

        sel.append("line").style("stroke-width", this.width()).style("stroke", this.color()).style("opacity", this.opacity()).attr("x1", 0).attr("x2", 0).attr("y1", y).attr("y2", this.param("height"));

        if (this.param("displayHandle")) {
          var area = this.d3.svg.area().x(function (d) {
            return d;
          }).y0(0).y1(handleHeight);

          sel.append("path").attr("d", area([-4, 4])).style("opacity", this.opacity()).style("fill", this.color());
        }

        this.items.exit().remove();
      },
      writable: true,
      configurable: true
    },
    draw: {
      value: function draw() {
        var el = arguments[0] === undefined ? null : arguments[0];

        el = el || this.items;

        var xScale = this.base.xScale;
        var xAccessor = this.x();
        var x = function (d) {
          return xScale(xAccessor(d));
        };

        el.attr("transform", function (d) {
          return "translate(" + x(d) + ", 0)";
        });
      },
      writable: true,
      configurable: true
    }
  });

  return Marker;
})(Layer);

accessors.getFunction(Marker.prototype, ["color", "opacity", "width", "x"]);

function factory() {
  return new Marker();
}
factory.Marker = Marker;

module.exports = factory;
//# sourceMappingURL=data:application/json;base64,