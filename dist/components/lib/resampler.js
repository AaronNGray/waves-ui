"use strict";

// return min and max values from the window defined by samplesPerPixel
function minMax(buffer, extractAtTimes, sampleRate, windowSize, defaultValue, downSampledAt) {
  // if the buffer comes from the `createSnapshot` function
  // `downSampledAt` is equivalent to the window size
  // of the snapshot
  downSampledAt = downSampledAt || 1;
  windowSize = windowSize / downSampledAt;
  sampleRate = sampleRate / downSampledAt;
  // console.log(windowSize);
  // console.time('minMax');

  var bufferLength = buffer.length;
  var data = [];
  var slice = buffer instanceof Float32Array ? "subarray" : "slice";

  for (var i = 0, length = extractAtTimes.length; i < length; i++) {
    var startTime = extractAtTimes[i];
    var sampleStart = startTime * sampleRate;

    if (sampleStart < 0 || sampleStart > bufferLength) {
      data = data.concat([defaultValue, defaultValue]);
      continue;
    }

    // get min and max value for each pixel
    // replace with `slice` if it's a raw object
    var extract = buffer[slice](sampleStart, sampleStart + windowSize);
    var min = Infinity,
        max = -Infinity;
    var extractLength = extract.length;

    for (var j = 0; j < extractLength; j++) {
      var value = extract[j];
      if (value < min) {
        min = value;
      }
      if (value > max) {
        max = value;
      }
    }

    data.push(min);
    data.push(max);
  }

  // console.timeEnd('minMax');
  return data;
}

// pick a value in each window
// alternate between min and max value
function createSnapshot(buffer, windowSize) {
  // @NOTE: maybe use a Float32Array for performance (cf. @padenot talk) ?
  var snapshot = [];
  var bufferLength = buffer.length;
  var slice = buffer instanceof Float32Array ? "subarray" : "slice";
  var captureMin = true;
  // return;
  for (var i = 0; i < bufferLength; i += windowSize) {
    var extract = buffer[slice](i, i + windowSize);
    var min = Infinity,
        max = -Infinity;
    var extractLength = extract.length;

    for (var j = 0; j < extractLength; j++) {
      var value = extract[j];
      if (value < min) {
        min = value;
      }
      if (value > max) {
        max = value;
      }
    }

    if (captureMin) {
      snapshot.push(min);
    } else {
      snapshot.push(max);
    }

    captureMin = !captureMin;
  }

  return snapshot;
}

module.exports = {
  minMax: minMax,
  createSnapshot: createSnapshot
};
//# sourceMappingURL=data:application/json;base64,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QUFDLEVBQUUsRUFBRTtBQUN0QyxVQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsVUFBSSxLQUFLLEdBQUcsR0FBRyxFQUFFO0FBQUUsV0FBRyxHQUFHLEtBQUssQ0FBQztPQUFFO0FBQ2pDLFVBQUksS0FBSyxHQUFHLEdBQUcsRUFBRTtBQUFFLFdBQUcsR0FBRyxLQUFLLENBQUM7T0FBRTtLQUNsQzs7QUFFRCxRQUFJLFVBQVUsRUFBRTtBQUNkLGNBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEIsTUFBTTtBQUNMLGNBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEI7O0FBRUQsY0FBVSxHQUFHLENBQUMsVUFBVSxDQUFDO0dBQzFCOztBQUVELFNBQU8sUUFBUSxDQUFDO0NBQ2pCOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixRQUFNLEVBQUUsTUFBTTtBQUNkLGdCQUFjLEVBQUUsY0FBYztDQUMvQixDQUFDIiwiZmlsZSI6ImVzNi9oZWxwZXJzL3pvb21lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJldHVybiBtaW4gYW5kIG1heCB2YWx1ZXMgZnJvbSB0aGUgd2luZG93IGRlZmluZWQgYnkgc2FtcGxlc1BlclBpeGVsXG5mdW5jdGlvbiBtaW5NYXgoYnVmZmVyLCBleHRyYWN0QXRUaW1lcywgc2FtcGxlUmF0ZSwgd2luZG93U2l6ZSwgZGVmYXVsdFZhbHVlLCBkb3duU2FtcGxlZEF0KSB7XG4gIC8vIGlmIHRoZSBidWZmZXIgY29tZXMgZnJvbSB0aGUgYGNyZWF0ZVNuYXBzaG90YCBmdW5jdGlvblxuICAvLyBgZG93blNhbXBsZWRBdGAgaXMgZXF1aXZhbGVudCB0byB0aGUgd2luZG93IHNpemVcbiAgLy8gb2YgdGhlIHNuYXBzaG90XG4gIGRvd25TYW1wbGVkQXQgPSBkb3duU2FtcGxlZEF0IHx8wqAxO1xuICB3aW5kb3dTaXplID0gd2luZG93U2l6ZSAvIGRvd25TYW1wbGVkQXQ7XG4gIHNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlIC8gZG93blNhbXBsZWRBdDtcbiAgLy8gY29uc29sZS5sb2cod2luZG93U2l6ZSk7XG4gIC8vIGNvbnNvbGUudGltZSgnbWluTWF4Jyk7XG5cbiAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gIHZhciBkYXRhID0gW107XG4gIHZhciBzbGljZSA9IChidWZmZXIgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpID8gJ3N1YmFycmF5JyA6ICdzbGljZSc7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGV4dHJhY3RBdFRpbWVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHN0YXJ0VGltZSA9IGV4dHJhY3RBdFRpbWVzW2ldO1xuICAgIHZhciBzYW1wbGVTdGFydCA9IHN0YXJ0VGltZSAqIHNhbXBsZVJhdGU7XG5cbiAgICBpZiAoc2FtcGxlU3RhcnQgPCAwIHx8wqBzYW1wbGVTdGFydCA+IGJ1ZmZlckxlbmd0aCkge1xuICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KFtkZWZhdWx0VmFsdWUsIGRlZmF1bHRWYWx1ZV0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZ2V0IG1pbiBhbmQgbWF4IHZhbHVlIGZvciBlYWNoIHBpeGVsXG4gICAgLy8gcmVwbGFjZSB3aXRoIGBzbGljZWAgaWYgaXQncyBhIHJhdyBvYmplY3RcbiAgICB2YXIgZXh0cmFjdCA9IGJ1ZmZlcltzbGljZV0oc2FtcGxlU3RhcnQsIHNhbXBsZVN0YXJ0ICsgd2luZG93U2l6ZSk7XG4gICAgdmFyIG1pbiA9IEluZmluaXR5LCBtYXggPSAtSW5maW5pdHk7XG4gICAgdmFyIGV4dHJhY3RMZW5ndGggPSBleHRyYWN0Lmxlbmd0aDtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZXh0cmFjdExlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBleHRyYWN0W2pdO1xuICAgICAgaWYgKHZhbHVlIDwgbWluKSB7IG1pbiA9IHZhbHVlOyB9XG4gICAgICBpZiAodmFsdWUgPiBtYXgpIHsgbWF4ID0gdmFsdWU7IH1cbiAgICB9XG5cbiAgICBkYXRhLnB1c2gobWluKTtcbiAgICBkYXRhLnB1c2gobWF4KTtcbiAgfVxuXG4gIC8vIGNvbnNvbGUudGltZUVuZCgnbWluTWF4Jyk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vLyBwaWNrIGEgdmFsdWUgaW4gZWFjaCB3aW5kb3dcbi8vIGFsdGVybmF0ZSBiZXR3ZWVuIG1pbiBhbmQgbWF4IHZhbHVlXG5mdW5jdGlvbiBjcmVhdGVTbmFwc2hvdChidWZmZXIsIHdpbmRvd1NpemUpIHtcbiAgLy8gQE5PVEU6IG1heWJlIHVzZSBhIEZsb2F0MzJBcnJheSBmb3IgcGVyZm9ybWFuY2UgKGNmLiBAcGFkZW5vdCB0YWxrKSA/XG4gIHZhciBzbmFwc2hvdCA9IFtdO1xuICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIHNsaWNlID0gKGJ1ZmZlciBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkgPyAnc3ViYXJyYXknIDogJ3NsaWNlJztcbiAgdmFyIGNhcHR1cmVNaW4gPSB0cnVlO1xuICAvLyByZXR1cm47XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyTGVuZ3RoOyBpICs9IHdpbmRvd1NpemUpIHtcbiAgICB2YXIgZXh0cmFjdCA9IGJ1ZmZlcltzbGljZV0oaSwgaSArIHdpbmRvd1NpemUpO1xuICAgIHZhciBtaW4gPSBJbmZpbml0eSwgbWF4ID0gLUluZmluaXR5O1xuICAgIHZhciBleHRyYWN0TGVuZ3RoID0gZXh0cmFjdC5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGV4dHJhY3RMZW5ndGg7IGorKykge1xuICAgICAgdmFyIHZhbHVlID0gZXh0cmFjdFtqXTtcbiAgICAgIGlmICh2YWx1ZSA8IG1pbikgeyBtaW4gPSB2YWx1ZTsgfVxuICAgICAgaWYgKHZhbHVlID4gbWF4KSB7IG1heCA9IHZhbHVlOyB9XG4gICAgfVxuXG4gICAgaWYgKGNhcHR1cmVNaW4pIHtcbiAgICAgIHNuYXBzaG90LnB1c2gobWluKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc25hcHNob3QucHVzaChtYXgpO1xuICAgIH1cblxuICAgIGNhcHR1cmVNaW4gPSAhY2FwdHVyZU1pbjtcbiAgfVxuXG4gIHJldHVybiBzbmFwc2hvdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1pbk1heDogbWluTWF4LFxuICBjcmVhdGVTbmFwc2hvdDogY3JlYXRlU25hcHNob3Rcbn07XG4iXX0=