"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var BaseShape = require("./base-shape");

var Segment = (function (_BaseShape) {
  function Segment() {
    _classCallCheck(this, Segment);

    if (_BaseShape != null) {
      _BaseShape.apply(this, arguments);
    }
  }

  _inherits(Segment, _BaseShape);

  _createClass(Segment, {
    getClassName: {
      value: function getClassName() {
        return "segment";
      }
    },
    _getAccessorList: {
      value: function _getAccessorList() {
        return { x: 0, y: 0, width: 0, height: 1, color: "#000000", opacity: 1 };
      }
    },
    _getDefaults: {
      value: function _getDefaults() {
        return {
          displayHandlers: true,
          handlerWidth: 2,
          handlerOpacity: 0.8,
          opacity: 0.6
        };
      }
    },
    render: {
      value: function render(renderingContext) {
        if (this.el) {
          return this.el;
        }

        this.el = document.createElementNS(this.ns, "g");

        this.segment = document.createElementNS(this.ns, "rect");
        this.segment.style.opacity = this.params.opacity;
        this.segment.setAttributeNS(null, "shape-rendering", "crispEdges");

        this.el.appendChild(this.segment);

        if (this.params.displayHandlers) {
          this.leftHandler = document.createElementNS(this.ns, "rect");
          this.leftHandler.classList.add("left", "handler");
          this.leftHandler.setAttributeNS(null, "width", this.params.handlerWidth);
          this.leftHandler.setAttributeNS(null, "shape-rendering", "crispEdges");
          this.leftHandler.style.opacity = this.params.handlerOpacity;
          this.leftHandler.style.cursor = "ew-resize";

          this.rightHandler = document.createElementNS(this.ns, "rect");
          this.rightHandler.classList.add("right", "handler");
          this.rightHandler.setAttributeNS(null, "width", this.params.handlerWidth);
          this.rightHandler.setAttributeNS(null, "shape-rendering", "crispEdges");
          this.rightHandler.style.opacity = this.params.handlerOpacity;
          this.rightHandler.style.cursor = "ew-resize";

          this.el.appendChild(this.leftHandler);
          this.el.appendChild(this.rightHandler);
        }

        return this.el;
      }
    },
    update: {
      value: function update(renderingContext, group, datum, index) {
        var x = renderingContext.xScale(this.x(datum));
        var y = renderingContext.yScale(this.y(datum));
        var width = renderingContext.xScale(this.width(datum));
        var height = renderingContext.yScale(this.height(datum));
        var color = this.color(datum);
        var opacity = this.opacity(datum);

        group.setAttributeNS(null, "transform", "translate(" + x + ", " + y + ")");

        this.el.style.opacity = opacity;

        this.segment.setAttributeNS(null, "width", Math.max(width, 0));
        this.segment.setAttributeNS(null, "height", height);
        this.segment.style.fill = color;

        if (this.params.displayHandlers) {
          // display handlers
          this.leftHandler.setAttributeNS(null, "height", height);
          this.leftHandler.setAttributeNS(null, "transform", "translate(0, 0)");
          this.leftHandler.style.fill = color;

          var rightHandlerTranslate = "translate(" + (width - this.params.handlerWidth) + ", 0)";
          this.rightHandler.setAttributeNS(null, "height", height);
          this.rightHandler.setAttributeNS(null, "transform", rightHandlerTranslate);
          this.rightHandler.style.fill = color;
        }
      }
    },
    inArea: {
      value: function inArea(renderingContext, datum, x1, y1, x2, y2) {
        var shapeX1 = renderingContext.xScale(this.x(datum));
        var shapeX2 = renderingContext.xScale(this.x(datum) + this.width(datum));
        var shapeY1 = renderingContext.yScale(this.y(datum));
        var shapeY2 = renderingContext.yScale(this.y(datum) + this.height(datum));

        // http://jsfiddle.net/uthyZ/ - check overlaping area
        var xOverlap = Math.max(0, Math.min(x2, shapeX2) - Math.max(x1, shapeX1));
        var yOverlap = Math.max(0, Math.min(y2, shapeY2) - Math.max(y1, shapeY1));
        var area = xOverlap * yOverlap;

        return area > 0;
      }
    }
  });

  return Segment;
})(BaseShape);

module.exports = Segment;
//# sourceMappingURL=data:application/json;base64,