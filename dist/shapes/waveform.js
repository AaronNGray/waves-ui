"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var BaseShape = require("./base-shape");
var xhtmlNS = "http://www.w3.org/1999/xhtml";

var Waveform = (function (_BaseShape) {
  function Waveform() {
    _classCallCheck(this, Waveform);

    if (_BaseShape != null) {
      _BaseShape.apply(this, arguments);
    }
  }

  _inherits(Waveform, _BaseShape);

  _createClass(Waveform, {
    _getAccessorList: {
      value: function _getAccessorList() {
        return { y: 0 };
      }
    },
    _getDefaults: {
      value: function _getDefaults() {
        return {
          sampleRate: 44100,
          color: "#000000",
          opacity: 1,
          renderingStrategy: "svg" // canvas is bugged (translation, etc...)
        };
      }
    },
    render: {
      value: function render(renderingContext) {
        if (this.shape) {
          return this.shape;
        }

        if (this.params.renderingStrategy === "svg") {
          this.shape = document.createElementNS(this.ns, "path");
          this.shape.setAttributeNS(null, "fill", "none");
          this.shape.setAttributeNS(null, "shape-rendering", "crispEdges");
          this.shape.setAttributeNS(null, "stroke", this.params.color);
          this.shape.style.opacity = this.params.opacity;
        } else if (this.params.renderingStrategy === "canvas") {
          this.shape = document.createElementNS(this.ns, "foreignObject");
          this.shape.setAttributeNS(null, "width", renderingContext.width);
          this.shape.setAttributeNS(null, "height", renderingContext.height);

          var canvas = document.createElementNS(xhtmlNS, "xhtml:canvas");

          this.ctx = canvas.getContext("2d");
          this.ctx.canvas.width = renderingContext.width;
          this.ctx.canvas.height = renderingContext.height;

          this.shape.appendChild(canvas);
        }

        // this.shape.style.opacity = this.params.opacity;

        return this.shape;
      }
    },
    update: {
      value: function update(renderingContext, group, datum, index) {
        var _this = this;

        // define nbr of samples per pixels
        var sliceMethod = datum instanceof Float32Array ? "subarray" : "slice";
        var nbrSamples = datum.length;
        var duration = nbrSamples / this.params.sampleRate;
        var width = renderingContext.xScale(duration);
        var samplesPerPixel = nbrSamples / width;
        var minMax = [];
        // get min/max per pixels
        for (var i = 0; i <= width; i++) {
          var startTime = renderingContext.xScale.invert(i);
          var startSample = startTime * this.params.sampleRate;

          var extract = datum[sliceMethod](startSample, startSample + samplesPerPixel);
          var min = Infinity;
          var max = -Infinity;
          for (var j = 0; j < extract.length; j++) {
            var sample = extract[j];
            if (sample < min) {
              min = sample;
            }
            if (sample > max) {
              max = sample;
            }
          }
          // disallow Infinity
          min = min === Infinity || min === -Infinity ? 0 : min;
          max = max === Infinity || max === -Infinity ? 0 : max;

          minMax.push({ time: startTime, values: [min, max] });
        }

        var MIN = 0;
        var MAX = 1;

        // rednering strategies
        if (this.params.renderingStrategy === "svg") {
          var instructions = minMax.map(function (datum, index) {
            var x = Math.floor(renderingContext.xScale(datum.time));
            var y1 = Math.round(renderingContext.yScale(_this.y(datum.values[MIN])));
            var y2 = Math.round(renderingContext.yScale(_this.y(datum.values[MAX])));

            return "" + x + "," + y1 + "L" + x + "," + y2;
          });

          var d = "M" + instructions.join("L");

          this.shape.setAttributeNS(null, "d", d);
        } else if (this.params.renderingStrategy === "canvas") {
          this.ctx.canvas.width = width;
          this.shape.setAttribute("width", width);
          // fix chrome bug with translate
          if (navigator.userAgent.toLowerCase().indexOf("chrome") > -1) {
            this.shape.setAttribute("x", renderingContext.offsetX);
          }

          this.ctx.strokeStyle = this.params.color;
          this.ctx.globalAlpha = this.params.opacity;
          this.ctx.moveTo(renderingContext.xScale(0), renderingContext.yScale(0));

          minMax.forEach(function (datum) {
            var x = renderingContext.xScale(datum.time);
            var y1 = renderingContext.yScale(_this.y(datum.values[MIN]));
            var y2 = renderingContext.yScale(_this.y(datum.values[MAX]));

            _this.ctx.moveTo(x, y1);
            _this.ctx.lineTo(x, y2);
          });

          this.ctx.stroke();
        }
      }
    }
  });

  return Waveform;
})(BaseShape);

module.exports = Waveform;
//# sourceMappingURL=data:application/json;base64,