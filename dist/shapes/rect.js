"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var BaseShape = require("./base-shape");

var Rect = (function (_BaseShape) {
  function Rect() {
    _classCallCheck(this, Rect);

    if (_BaseShape != null) {
      _BaseShape.apply(this, arguments);
    }
  }

  _inherits(Rect, _BaseShape);

  _createClass(Rect, {
    getClassName: {
      value: function getClassName() {
        return "rect";
      }
    },
    _getAccessorList: {
      value: function _getAccessorList() {
        return { x: 0, y: 0, width: 0, height: 0, color: "#000000" };
      }
    },
    _getDefaults: {
      value: function _getDefaults() {
        return {
          handlerWidth: 2,
          handlerOpacity: 0.4,
          opacity: 0.8
        };
      }
    },
    render: {
      value: function render(context) {
        if (this.shape) {
          return this.shape;
        }

        this.shape = document.createElementNS(this.ns, "g");

        this.rect = document.createElementNS(this.ns, "rect");

        this.leftHandler = document.createElementNS(this.ns, "rect");
        this.leftHandler.setAttributeNS(null, "width", this.params.handlerWidth);
        this.leftHandler.style.fill = "#000000";
        this.leftHandler.classList.add("left", "handler");
        this.leftHandler.style.cursor = "ew-resize";

        this.rightHandler = document.createElementNS(this.ns, "rect");
        this.rightHandler.setAttributeNS(null, "width", this.params.handlerWidth);
        this.rightHandler.style.fill = "#000000";
        this.rightHandler.classList.add("right", "handler");
        this.rightHandler.style.cursor = "ew-resize";

        this.shape.appendChild(this.rect);
        this.shape.appendChild(this.leftHandler);
        this.shape.appendChild(this.rightHandler);

        return this.shape;
      }
    },
    update: {
      value: function update(context, group, datum, index) {
        var x = context.xScale(this.x(datum));
        var y = context.yScale(this.y(datum));
        var width = context.xScale(this.width(datum));
        var height = context.yScale(this.height(datum));
        var color = this.color(datum);

        group.setAttributeNS(null, "transform", "translate(" + x + ", " + y + ")");

        this.rect.setAttributeNS(null, "width", Math.max(width, 0));
        this.rect.setAttributeNS(null, "height", height);
        this.rect.style.fill = color;

        // display handlers
        this.leftHandler.setAttributeNS(null, "height", height);
        this.leftHandler.setAttributeNS(null, "transform", "translate(0, 0)");
        var rightHandlerTranslate = "translate(" + (width - this.params.handlerWidth) + ", 0)";
        this.rightHandler.setAttributeNS(null, "height", height);
        this.rightHandler.setAttributeNS(null, "transform", rightHandlerTranslate);
      }
    },
    inArea: {
      value: function inArea(context, datum, x1, y1, x2, y2) {
        var shapeX1 = context.xScale(this.x(datum));
        var shapeY1 = context.yScale(this.y(datum));
        var shapeX2 = context.xScale(this.x(datum) + this.width(datum));
        var shapeY2 = context.yScale(this.y(datum) + this.height(datum));

        // http://jsfiddle.net/uthyZ/ - check overlaping area
        var xOverlap = Math.max(0, Math.min(x2, shapeX2) - Math.max(x1, shapeX1));
        var yOverlap = Math.max(0, Math.min(y2, shapeY2) - Math.max(y1, shapeY1));
        var area = xOverlap * yOverlap;

        return area > 0;
      }
    }
  });

  return Rect;
})(BaseShape);

module.exports = Rect;
//# sourceMappingURL=data:application/json;base64,